#include <cstdlib>
#include <cstring>

#define CATCH_CONFIG_MAIN
#include "catch.hpp"

#include "../mameBitmap.h"
#include <stdlib.h>

uint8_t pbm_ascii_image[] = {
0x50,0x31,0x0a,0x32,0x30,0x20,0x32,0x30,0x0a,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,
0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,
0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x0a,0x30,0x30,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x31,0x31,0x31,0x30,0x30,0x30,
0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x30,0x30,0x31,0x31,
0x30,0x30,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x0a,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x31,0x30,
0x30,0x30,0x30,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x31,
0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x30,0x0a,0x31,0x31,
0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x30,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,
0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x30,0x30,0x30,
0x30,0x30,0x30,0x30,0x0a,0x31,0x31,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x31,0x30,0x30,0x30,0x30,
0x30,0x30,0x30,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x31,0x31,
0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x0a,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x30,0x30,0x31,0x31,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x31,0x31,0x31,0x31,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x31,0x30,0x30,0x31,0x31,0x30,0x31,0x31,0x0a };

uint8_t pbm_raw_image[] = {
0x50,0x34,0x0a,0x32,0x30,0x20,0x32,0x30,0x0a,0xff,0xff,0xf0,0xff,0xff,0xf0,0xff,0xff,0xf0,0xe0,0x0c,0xc0,0xe0,0x0c,0xc0,0xe7,0xfc,0xc0,0xe7,0xfc,0xc0,0xe7,0x0c,
0xc0,0xe6,0x0c,0xc0,0xe6,0x0c,0xc0,0xe6,0x3f,0xf0,0xe6,0x3f,0xf0,0xff,0xff,0xf0,0xff,0xf8,0x00,0xe0,0x38,0x00,0xe0,0x39,0xf0,0xff,0xf9,0xf0,0xff,0xf9,0x80,0xe0,
0x39,0xb0,0xe0,0x39,0xb0,0x0a
};

uint8_t pgm_ascii_image[] = {
0x50,0x32,0x0a,0x32,0x30,0x20,0x32,0x30,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x34,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x33,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x35,0x30,0x0a,
0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x31,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x33,0x0a,0x31,
0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x35,0x30,0x0a,0x35,0x30,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,
0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x35,0x30,0x0a,0x35,0x30,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x33,
0x0a,0x31,0x35,0x33,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,
0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x33,0x0a,0x31,0x35,0x33,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x30,0x34,0x0a,0x32,
0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,
0x30,0x34,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x30,
0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,
0x34,0x0a,0x32,0x30,0x34,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,
0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,
0x32,0x30,0x34,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,0x0a,
0x30,0x0a,0x30,0x0a,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x35,0x30,0x0a,0x32,0x30,0x34,0x0a,0x32,
0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,
0x0a,0x32,0x35,0x35,0x0a,0x37,0x37,0x0a,0x37,0x37,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x30,0x34,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x31,0x32,0x38,0x0a,0x31,0x32,0x38,0x0a,0x32,0x35,0x35,0x0a,0x37,0x37,0x0a,0x38,0x35,0x0a
};

uint8_t pgm_raw_image[] = {
0x50,0x35,0x0a,0x32,0x30,0x20,0x32,0x30,0x0a,0x32,0x35,0x35,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xfd,0xff,0xff,0xff,0xff,0xff,0xff,0x32,0x32,0xff,0xff,0x32,0x32,0xff,0xff,0x00,0x00,0x00,
0xff,0xff,0xfb,0xff,0xff,0xff,0xff,0xff,0xff,0x32,0x32,0xff,0xff,0x32,0x32,0xff,0xff,0x00,0x00,0x00,0xff,0xfd,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x32,0x32,0xff,
0xff,0x32,0x32,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x32,0x32,0xff,0xff,0x32,0x32,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x99,0x99,
0x99,0xff,0xff,0xff,0xff,0x32,0x32,0xff,0xff,0x32,0x32,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x99,0x99,0xff,0xff,0xff,0xff,0xff,0x32,0x32,0xff,0xff,0x32,0x32,0xff,
0xff,0x00,0x00,0x00,0xff,0xff,0x99,0x99,0xff,0xff,0xff,0xff,0xff,0x32,0x32,0xff,0xff,0x32,0x32,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0x99,0x99,0xff,0xff,0xff,0xcc,
0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x00,0x00,0x00,0xff,0xff,0x99,0x99,0xff,0xff,0xff,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x00,0x00,0x00,
0x32,0x32,0x32,0x32,0x32,0x32,0x32,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x00,0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0xcc,0xcc,0xcc,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xcc,0xcc,0xcc,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xcc,0xcc,0xcc,0xff,0xff,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0xcc,0xcc,0xcc,0xff,0xff,0x80,0x80,0x80,0x80,
0x80,0x00,0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0xcc,0xcc,0xcc,0xff,0xff,0x80,0x80,0xff,0xff,0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xcc,
0xcc,0xcc,0xff,0xff,0x80,0x80,0xff,0x4d,0x4d,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xcc,0xcc,0xcc,0xff,0xff,0x80,0x80,0xff,0x4d,0x55,0x0a
};

uint8_t ppm_ascii_image[] = {
0x50,0x33,0x0a,0x32,0x30,0x20,0x32,0x30,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x34,0x0a,0x32,0x35,0x34,0x0a,0x32,0x35,0x34,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x33,0x0a,0x32,0x35,0x33,0x0a,0x32,0x35,0x33,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x38,
0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x31,0x0a,0x32,0x35,0x31,
0x0a,0x32,0x35,0x31,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,
0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,
0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x33,0x0a,0x32,0x35,0x33,0x0a,0x32,0x35,0x33,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,
0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,
0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,
0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,
0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,
0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,
0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,
0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,
0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,
0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x38,0x31,0x0a,0x32,
0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,
0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,
0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x38,0x31,0x0a,0x32,0x35,
0x35,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x32,0x32,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,
0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,
0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,
0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,
0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,
0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,
0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x37,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,
0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,
0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,
0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,
0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,0x0a,
0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,
0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,
0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,
0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,
0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,
0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,
0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,
0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,
0x32,0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x39,0x0a,0x31,0x32,0x32,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,
0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,
0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,
0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x37,
0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x37,0x39,0x0a,
0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,
0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,
0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,0x35,
0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,
0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,
0x35,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,
0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,
0x30,0x0a,0x30,0x0a,0x30,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,
0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,
0x32,0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x39,0x0a,0x32,0x35,0x35,0x0a,0x31,0x35,0x32,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,
0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,
0x32,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,
0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,
0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x37,0x37,0x0a,0x37,0x37,0x0a,0x37,0x37,0x0a,0x37,0x37,0x0a,0x37,0x37,0x0a,0x37,0x37,0x0a,0x30,0x0a,0x30,0x0a,0x30,
0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,
0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,0x0a,0x32,0x35,0x35,0x0a,0x31,0x37,0x30,0x0a,0x31,0x38,0x36,
0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x37,0x39,0x0a,
0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x37,0x39,0x0a,0x31,0x30,0x36,0x0a,0x32,0x30,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x32,0x35,0x35,0x0a,0x37,0x37,0x0a,
0x37,0x37,0x0a,0x37,0x37,0x0a,0x38,0x35,0x0a,0x38,0x35,0x0a,0x38,0x35,0x0a
};

uint8_t ppm_raw_image[] = {
0x50,0x36,0x0a,0x32,0x30,0x20,0x32,0x30,0x0a,0x32,0x35,0x35,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xfe,0xfe,0xff,0xff,0xff,0xfd,0xfd,0xfd,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xb5,0xff,0x13,0xb5,0xff,0x13,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x13,0xe1,0xff,0x13,0xe1,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xfb,0xfb,0xfb,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xb5,0xff,0x13,0xb5,0xff,0x13,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x13,0xe1,0xff,0x13,0xe1,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xff,0xff,0xff,0xfd,0xfd,0xfd,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xb5,0xff,0x13,
0xb5,0xff,0x13,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x13,0xe1,0xff,0x13,0xe1,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xb5,0xff,0x13,0xb5,0xff,0x13,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0x13,0xe1,0xff,0x13,0xe1,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb5,0xff,0x13,0xb5,0xff,0x13,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0x13,0xe1,0xff,0x13,0xe1,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0xaa,0xff,
0xaa,0xaa,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb5,0xff,0x13,0xb5,0xff,0x13,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x13,0xe1,
0xff,0x13,0xe1,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb5,0xff,0x13,0xb5,0xff,0x13,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x13,0xe1,0xff,0x13,0xe1,0xff,
0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,
0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,
0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x7a,0xff,0x13,0x7a,0xff,0x13,0x7a,0xff,0x13,0x7a,0xff,0x13,0x7a,0xff,0x13,0x7a,0xff,0x13,0x7a,0xff,0xaa,0xba,0xff,0xaa,0xba,
0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x13,0x7a,0xff,0x13,0x7a,0xff,0x13,0x7a,0xff,0x13,0x7a,0xff,0x13,0x7a,0xff,0x13,0x7a,0xff,0x13,0x7a,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x4f,0x6a,
0x14,0x4f,0x6a,0x14,0x4f,0x6a,0x14,0x4f,0x6a,0x14,0x4f,0x6a,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0xff,0x98,0x13,0xff,0x98,0x13,0xff,0x98,0x13,
0xff,0x98,0x13,0xff,0x98,0x13,0xff,0x98,0x13,0xff,0x98,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x4f,0x6a,0x14,0x4f,0x6a,0x14,
0x4f,0x6a,0x14,0x4f,0x6a,0x14,0x4f,0x6a,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0xff,0x98,0x13,0xff,0x98,0x13,0xff,0x98,0x13,0xff,0x98,0x13,0xff,
0x98,0x13,0xff,0x98,0x13,0xff,0x98,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x4f,0x6a,0x14,0x4f,0x6a,0x14,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x4f,0x6a,0x14,0x4f,0x6a,0x14,0xff,0xff,0xff,0x4d,0x4d,0x4d,0x4d,0x4d,
0x4d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,
0xba,0xff,0xaa,0xba,0xff,0xaa,0xba,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x4f,0x6a,0x14,0x4f,0x6a,0x14,0xff,0xff,0xff,0x4d,0x4d,0x4d,0x55,0x55,0x55,0x0a
};

#define TEST_DIR "../"
#define BUFFER_SIZE 8192
#define RANDOM_TEST_COUNT 32
#define RANDOM_TEST_SEED 5132

TEST_CASE("Get image information est", "[getInfo]")
{
    mameBitmap_format format;
    uint16_t width;
    uint16_t height;
    uint16_t max_value;

    SECTION( "from memory ") 
    {
        mameBitmap_getInfoFromMemory( pbm_ascii_image, sizeof( pbm_ascii_image ), &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PBM_ASCII );
        REQUIRE( max_value == 1);

        mameBitmap_getInfoFromMemory( pbm_raw_image, sizeof( pbm_raw_image ), &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PBM_RAW );
        REQUIRE( max_value == 1);

        mameBitmap_getInfoFromMemory( pgm_ascii_image, sizeof( pgm_ascii_image ), &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PGM_ASCII );
        REQUIRE( max_value == 255);

        mameBitmap_getInfoFromMemory( pgm_raw_image, sizeof( pgm_raw_image ), &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PGM_RAW );
        REQUIRE( max_value == 255);

        mameBitmap_getInfoFromMemory( ppm_ascii_image, sizeof( ppm_ascii_image ), &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PPM_ASCII );
        REQUIRE( max_value == 255);

        mameBitmap_getInfoFromMemory( ppm_raw_image, sizeof( ppm_raw_image ), &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PPM_RAW );
        REQUIRE( max_value == 255);
    }

    SECTION( "from file" )
    {
        mameBitmap_getInfoFromFile( TEST_DIR "pbm_ascii.pbm", &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PBM_ASCII );
        REQUIRE( max_value == 1);

        mameBitmap_getInfoFromFile( TEST_DIR "pbm_raw.pbm", &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PBM_RAW );
        REQUIRE( max_value == 1);

        mameBitmap_getInfoFromFile( TEST_DIR "pgm_ascii.pgm", &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PGM_ASCII );
        REQUIRE( max_value == 255);

        mameBitmap_getInfoFromFile( TEST_DIR "pgm_raw.pgm", &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PGM_RAW );
        REQUIRE( max_value == 255);

        mameBitmap_getInfoFromFile( TEST_DIR "ppm_ascii.ppm", &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PPM_ASCII );
        REQUIRE( max_value == 255);

        mameBitmap_getInfoFromFile( TEST_DIR "ppm_raw.ppm", &width, &height, &format, &max_value );
        REQUIRE( width == 20 );
        REQUIRE( height == 20 );
        REQUIRE( format == MAMEBITMAP_FORMAT_PPM_RAW );
        REQUIRE( max_value == 255);
    }
}

TEST_CASE("Decode/Encode", "[decode/encode]")
{

    SECTION( "ascii pbm from memory into memory") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromMemory( pbm_ascii_image,
                                              sizeof( pbm_ascii_image ),
                                              ref_image_buffer,
                                              sizeof( ref_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToMemory( ref_image_buffer,
                                            ref_image_size,
                                            encode_image_buffer,
                                            sizeof( encode_image_buffer ),
                                            width,
                                            height,
                                            format,
                                            max_value,
                                            &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromMemory( encode_image_buffer,
                                              encode_image_size,
                                              decode_image_buffer,
                                              sizeof( decode_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }

    SECTION( "raw pbm from memory into memory") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromMemory( pbm_raw_image,
                                              sizeof( pbm_raw_image ),
                                              ref_image_buffer,
                                              sizeof( ref_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToMemory( ref_image_buffer,
                                            ref_image_size,
                                            encode_image_buffer,
                                            sizeof( encode_image_buffer ),
                                            width,
                                            height,
                                            format,
                                            max_value,
                                            &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromMemory( encode_image_buffer,
                                              encode_image_size,
                                              decode_image_buffer,
                                              sizeof( decode_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }

    SECTION( "ascii pgm from memory into memory") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromMemory( pgm_ascii_image,
                                              sizeof( pgm_ascii_image ),
                                              ref_image_buffer,
                                              sizeof( ref_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToMemory( ref_image_buffer,
                                            ref_image_size,
                                            encode_image_buffer,
                                            sizeof( encode_image_buffer ),
                                            width,
                                            height,
                                            format,
                                            max_value,
                                            &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromMemory( encode_image_buffer,
                                              encode_image_size,
                                              decode_image_buffer,
                                              sizeof( decode_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }

    SECTION( "raw pgm from memory into memory") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromMemory( pgm_raw_image,
                                              sizeof( pgm_raw_image ),
                                              ref_image_buffer,
                                              sizeof( ref_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToMemory( ref_image_buffer,
                                            ref_image_size,
                                            encode_image_buffer,
                                            sizeof( encode_image_buffer ),
                                            width,
                                            height,
                                            format,
                                            max_value,
                                            &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromMemory( encode_image_buffer,
                                              encode_image_size,
                                              decode_image_buffer,
                                              sizeof( decode_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }

    SECTION( "ascii ppm from memory into memory") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromMemory( ppm_ascii_image,
                                              sizeof( ppm_ascii_image ),
                                              ref_image_buffer,
                                              sizeof( ref_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToMemory( ref_image_buffer,
                                            ref_image_size,
                                            encode_image_buffer,
                                            sizeof( encode_image_buffer ),
                                            width,
                                            height,
                                            format,
                                            max_value,
                                            &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromMemory( encode_image_buffer,
                                              encode_image_size,
                                              decode_image_buffer,
                                              sizeof( decode_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }

    SECTION( "raw ppm from memory into memory") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromMemory( ppm_raw_image,
                                              sizeof( ppm_raw_image ),
                                              ref_image_buffer,
                                              sizeof( ref_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToMemory( ref_image_buffer,
                                            ref_image_size,
                                            encode_image_buffer,
                                            sizeof( encode_image_buffer ),
                                            width,
                                            height,
                                            format,
                                            max_value,
                                            &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromMemory( encode_image_buffer,
                                              encode_image_size,
                                              decode_image_buffer,
                                              sizeof( decode_image_buffer ),
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }
}

TEST_CASE("Decode/Encode (file)", "[decode/encode]")
{

    SECTION( "ascii pbm from file into file") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "pbm_ascii.pbm",
                                            ref_image_buffer,
                                            sizeof( ref_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToFile( ref_image_buffer,
                                          ref_image_size,
                                          TEST_DIR "res",
                                          width,
                                          height,
                                          format,
                                          max_value,
                                          &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "res",
                                            decode_image_buffer,
                                            sizeof( decode_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }

    SECTION( "raw pbm from file into file") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "pbm_raw.pbm",
                                            ref_image_buffer,
                                            sizeof( ref_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToFile( ref_image_buffer,
                                          ref_image_size,
                                          TEST_DIR "res",
                                          width,
                                          height,
                                          format,
                                          max_value,
                                          &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "res",
                                            decode_image_buffer,
                                            sizeof( decode_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }

    SECTION( "ascii pgm from file into file") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "pgm_ascii.pgm",
                                            ref_image_buffer,
                                            sizeof( ref_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToFile( ref_image_buffer,
                                          ref_image_size,
                                          TEST_DIR "res",
                                          width,
                                          height,
                                          format,
                                          max_value,
                                          &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "res",
                                            decode_image_buffer,
                                            sizeof( decode_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }

    SECTION( "raw pgm from file into file") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "pgm_raw.pgm",
                                            ref_image_buffer,
                                            sizeof( ref_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToFile( ref_image_buffer,
                                          ref_image_size,
                                          TEST_DIR "res",
                                          width,
                                          height,
                                          format,
                                          max_value,
                                          &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "res",
                                            decode_image_buffer,
                                            sizeof( decode_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }

    SECTION( "ascii ppm from file into file") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "ppm_ascii.ppm",
                                            ref_image_buffer,
                                            sizeof( ref_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToFile( ref_image_buffer,
                                          ref_image_size,
                                          TEST_DIR "res",
                                          width,
                                          height,
                                          format,
                                          max_value,
                                          &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "res",
                                            decode_image_buffer,
                                            sizeof( decode_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }

    SECTION( "raw ppm from file into file") 
    {
        uint16_t width;
        uint16_t height;
        mameBitmap_format format;
        uint16_t max_value;
        uint8_t ref_image_buffer[ BUFFER_SIZE ];
        size_t ref_image_size;

        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "ppm_raw.ppm",
                                            ref_image_buffer,
                                            sizeof( ref_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &ref_image_size ) );

        uint8_t encode_image_buffer[ BUFFER_SIZE ];
        size_t encode_image_size;
        REQUIRE( mameBitmap_encodeToFile( ref_image_buffer,
                                          ref_image_size,
                                          TEST_DIR "res",
                                          width,
                                          height,
                                          format,
                                          max_value,
                                          &encode_image_size ) );

        uint8_t decode_image_buffer[ BUFFER_SIZE ];
        size_t decode_image_size;
        REQUIRE( mameBitmap_decodeFromFile( TEST_DIR "res",
                                            decode_image_buffer,
                                            sizeof( decode_image_buffer ),
                                            &width,
                                            &height,
                                            &format,
                                            &max_value,
                                            &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }
    }
}

TEST_CASE("Random Decode/Encode", "[decode/encode]")
{
    srand( RANDOM_TEST_SEED );
    for( int i = 0; i < RANDOM_TEST_COUNT; i++ )
    {
        uint16_t width = rand() % 300;
        uint16_t height = rand() % 300;
        mameBitmap_format format = (mameBitmap_format)(( rand() % MAMEBITMAP_FORMAT_PPM_RAW ) + 1);
        uint16_t max_value = ( format == MAMEBITMAP_FORMAT_PBM_RAW || format == MAMEBITMAP_FORMAT_PBM_ASCII ) ? 1 : rand() % 256;
        uint8_t components = ( format == MAMEBITMAP_FORMAT_PPM_RAW || format == MAMEBITMAP_FORMAT_PPM_ASCII ) ? 3 : 1;

        size_t ref_image_size = components * width * height;
        uint8_t* ref_image_buffer = new uint8_t[ ref_image_size ];
        for( int i = 0; i < ref_image_size; i++ )
        {
            ref_image_buffer[ i ] = rand() % max_value;
        }

        size_t encode_image_buffer_size = 4 * components * width * height;
        uint8_t* encode_image_buffer = new uint8_t[ encode_image_buffer_size ];
        size_t encode_image_size;

        REQUIRE( mameBitmap_encodeToMemory( ref_image_buffer,
                                            ref_image_size,
                                            encode_image_buffer,
                                            encode_image_buffer_size,
                                            width,
                                            height,
                                            format,
                                            max_value,
                                            &encode_image_size ) );

        size_t decode_image_size = components * width * height;
        size_t decode_image_buffer_size = components * width * height;
        uint8_t* decode_image_buffer = new uint8_t[ decode_image_size ];
        REQUIRE( mameBitmap_decodeFromMemory( encode_image_buffer,
                                              encode_image_size,
                                              decode_image_buffer,
                                              decode_image_buffer_size,
                                              &width,
                                              &height,
                                              &format,
                                              &max_value,
                                              &decode_image_size ) );


        REQUIRE( ref_image_size == decode_image_size );
        for( int i = 0; i < ref_image_size; i++ )
        {
            REQUIRE( ref_image_buffer[i] == decode_image_buffer[i] );
        }

        delete[] decode_image_buffer;
        delete[] encode_image_buffer;
        delete[] ref_image_buffer;
    }
}
